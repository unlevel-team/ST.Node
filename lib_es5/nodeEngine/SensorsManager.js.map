{"version":3,"sources":["nodeEngine/SensorsManager.js"],"names":[],"mappings":"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","file":"nodeEngine/SensorsManager.js","sourcesContent":["\"use strict\";\r\n\r\n\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n\r\n/**\r\n * SensorsManager CONSTANTS\r\n */\r\nconst SensorsManager_CONSTANTS = {\r\n\t\t\"Config\" : {\r\n\t\t\t\"type_Vsensor\" : \"vsensor\",\r\n\t\t\t\"type_Cylonjs\" : \"cylonjs\"\r\n\r\n\t\t},\r\n\t\t\r\n\t\t\"States\" : {\r\n\t\t\t\"SEstate_Config\" : \"config\",\r\n\t\t\t\"SEstate_Ready\" : \"ready\",\r\n\t\t\t\"SEstate_Working\" : \"working\",\r\n\t\t\t\"SEstate_Stop\" : \"stop\"\r\n\t\t},\r\n\t\t\r\n\t\t\"Events\" : {\r\n\t\t\t\"SensorEngine_Ready\" : \"SE Ready\",\r\n\t\t\t\r\n\t\t\t\"MainLoop_Tick\" : \"Main Loop\",\r\n\t\t\t\"MainLoop_Stop\" : \"Main Loop Stop\",\r\n\t\t\t\r\n\t\t\t\"SensorEngine_Start\" : \"SE start\",\r\n\t\t\t\"SensorEngine_Stop\" : \"SE stop\",\r\n\t\t\t\r\n\t\t\t\"SensorOptionsUpdated\" : \"Sensor Options Updated\",\r\n\r\n\t\t\t\r\n\t\t\t\"SensorData\" : \"Sensor Data\"\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\t\"Messages\" : {\r\n\t\t\t\"getSensorsList\" : \"Get Sensors List\",\r\n\t\t\t\"SensorsList\" : \"Sensors List\",\r\n\t\t\t\"getSensorInfo\" : \"Get Sensor Info\",\r\n\t\t\t\"SensorInfo\" : \"Sensor Info\",\r\n\t\t\t\"getSensorOptions\" : \"Get Sensor Options\",\r\n\t\t\t\"setSensorOptions\" : \"Set Sensor Options\",\r\n\t\t\t\"SensorOptions\" : \"Sensor Options\",\r\n\t\t\t\"SensorOptionsUpdated\" : \"Sensor Options Updated\",\r\n\t\t\t\r\n\t\t\t\"StartSensor\" : \"StartSensor\",\r\n\t\t\t\"SensorStarted\" : \"SensorStarted\",\r\n\t\t\t\"StopSensor\" : \"StopSensor\",\r\n\t\t\t\"SensorStopped\" : \"SensorStopped\",\r\n\t\t\t\r\n\t\t\t\"TurnOffSensors\" : \"TurnOffSensors\"\r\n\r\n\t\t}\r\n\t};\r\n\r\n\r\n/**\r\n * Sensor Engine\r\n */\r\nclass SensorEngine {\r\n\t\r\n\tconstructor(config) {\r\n\t\t\r\n\t\tthis.config = config;\r\n\t\tthis._mainLoop = null;\r\n\t\t\r\n\t\tthis.state = SensorsManager_CONSTANTS.States.SEstate_Config;\r\n\r\n\t\t\r\n\t\tthis.CONSTANTS = SensorsManager_CONSTANTS;\r\n\t\t\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize\r\n\t */\r\n\tinitialize() {\r\n\t\t\r\n\t\tlet sensorEngine = this;\r\n\t\t\r\n\t\tsensorEngine.eventEmitter.on( sensorEngine.CONSTANTS.Events.MainLoop_Stop, function() {\r\n\t\t\tclearInterval( sensorEngine._mainLoop );\r\n\t\t\tsensorEngine.state = sensorEngine.CONSTANTS.States.SEstate_Ready;\r\n\t\t});\r\n\t\t\r\n\t\tsensorEngine.state = SensorsManager_CONSTANTS.States.SEstate_Ready;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Main loop\r\n\t */\r\n\tmainLoop() {\r\n\t  let sensorEngine = this;\r\n\t  \r\n\t  if ( sensorEngine.state != sensorEngine.CONSTANTS.States.SEstate_Ready ) {\r\n\t\t  throw \"Bad state\";\r\n\t  }\r\n\t  \r\n\t  sensorEngine.state = sensorEngine.CONSTANTS.States.SEstate_Working;\r\n\t  \r\n\t  sensorEngine._mainLoop = setInterval(() => {\r\n\t\t  if (sensorEngine.state == sensorEngine.CONSTANTS.States.SEstate_Working) {\r\n\t\t\t  sensorEngine.eventEmitter.emit(sensorEngine.CONSTANTS.Events.MainLoop_Tick);\r\n\t\t  } else {\r\n\t\t\t  sensorEngine.eventEmitter.emit(sensorEngine.CONSTANTS.Events.MainLoop_Stop);\r\n\t\t  }\r\n\t  }, sensorEngine.config.loopTime);\r\n\t  \r\n\t}\r\n\t\r\n\t/**\r\n\t * Stop main loop\r\n\t */\r\n\tstopMainLoop() {\r\n\t\tlet sensorEngine = this;\r\n\t\tsensorEngine.eventEmitter.emit(sensorEngine.CONSTANTS.Events.MainLoop_Stop);\r\n\t}\r\n\t\r\n\t\r\n\tstartEngine() {\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\tstopEngine() {\r\n\t\t\r\n\t}\r\n\t\r\n\tgetOptions() {\r\n\t\treturn {};\r\n\t}\r\n\t\r\n\t\r\n\tsetOptions(options) {\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**\r\n * Sensor\r\n */\r\nclass Sensor {\r\n\t\r\n\tconstructor(config) {\r\n\t\t\r\n\t\tthis.config = config;\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\tthis.sensorEngine = null;\r\n\r\n\t}\r\n\t\r\n\tinitialize() {\r\n\t\t\r\n\t\tlet sensor = this;\r\n\t\t\r\n\t\t// ··· - ··· - ··· - ··· - ··· - ··· - ··· - ··· _ ··· - ··· - ··· - ··· _ ··· - ··· - ··· \\/ ···\r\n\t\t// Sensor Engine URL \r\n\t\tif (sensor.config.options.sensorEngineURL != undefined && \r\n\t\t\t\tsensor.config.options.sensorEngineURL != null) {\r\n\t\t\t\r\n\t\t\tsensor._sensorEngine = null;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tsensor._sensorEngine = require(sensor.config.options.sensorEngineURL);\r\n\t\t\t\tsensor.sensorEngine = new sensor._sensorEngine(sensor.config);\r\n\t\t\t\tsensor.sensorEngine.initialize();\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t  console.log('<EEE> Sensor.initialize');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t  console.log(e);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t}\r\n\t\t} \r\n\t\t// ··· - ··· - ··· - ··· - ··· - ··· - ··· - ··· _ ··· - ··· - ··· - ··· _ ··· - ··· - ··· /\\ ···\r\n\r\n\t\t\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * VSensor\r\n */\r\nclass VSensor extends Sensor {\r\n\t\r\n\tconstructor(config){\r\n\t\tsuper(config);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * CylSensor\r\n */\r\nclass CylSensor extends Sensor {\r\n\t\r\n\tconstructor(config){\r\n\t\tsuper(config);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Sensors Manager\r\n */\r\nclass SensorsManager {\r\n\t\r\n\tconstructor() {\r\n\t\t\r\n\t\tthis.sensorList = [];\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\tthis.CONSTANTS = SensorsManager_CONSTANTS;\r\n\r\n\t\t\r\n\t\tthis.nodeCtrlSrv = null;\r\n\t\t\r\n\t\tthis._Cylon = null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set NodeControlService\r\n\t */\r\n\tsetNodeControlService(nodeCtrlSrv) {\r\n\t\r\n\t\tlet smng = this;\r\n\t\t\r\n\t\tif (smng.nodeCtrlSrv && \r\n\t\t\t\tsmng.nodeCtrlSrv != null) {\r\n\t\t\tthrow \"Node control service exist.\";\r\n\t\t}\r\n\t\t\r\n\t\tsmng.nodeCtrlSrv = nodeCtrlSrv;\r\n\t\tlet socket = nodeCtrlSrv.socket;\r\n\t\t\r\n\t\t\r\n\t\t// Map event SensorOptionsUpdated\r\n\t\tsmng.eventEmitter.on(smng.CONSTANTS.Events.SensorOptionsUpdated, function(data){\r\n\t\t\t\r\n\t\t\tconsole.log('<*> SensorsManager.Events.SensorOptionsUpdated');\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet sensor = data.sensor;\r\n\t\t\t\r\n\t\t\tsocket.emit(smng.CONSTANTS.Messages.SensorOptionsUpdated, {\r\n\t\t\t\t\"sensorID\": sensor.config.id\r\n\t\t\t});\t// Emit message SensorOptions\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n//\t\t// Map event disconnect\r\n//\t\tsocket.on(\"disconnect\", function(data){\r\n//\t\t\tsocket.removeAllListeners(smng.CONSTANTS.Messages.getSensorsList);\r\n//\t\t\tsocket.removeAllListeners(smng.CONSTANTS.Messages.getSensorOptions);\r\n//\t\t\tsocket.removeAllListeners(smng.CONSTANTS.Messages.setSensorOptions);\r\n//\t\t\tsocket.removeAllListeners(smng.CONSTANTS.Messages.StartSensor);\r\n//\t\t\tsocket.removeAllListeners(smng.CONSTANTS.Messages.StopSensor);\r\n//\t\t\tsocket.removeAllListeners(smng.CONSTANTS.Messages.TurnOffSensors);\r\n//\t\t});\r\n\t\t\r\n\t\t\r\n\t\t  // Map Message getSensorsList\r\n\t\t\tsocket.on( smng.CONSTANTS.Messages.getSensorsList, function(msg){\r\n\t\t\t\tsmng._msg_getSensorsList(msg);\r\n\t\t  });\r\n\t\t\t\r\n\t\t\t\r\n\t\t  // Map Message getSensorOptions\r\n\t\t\tsocket.on( smng.CONSTANTS.Messages.getSensorOptions, function(msg){\r\n\t\t\t\tsmng._msg_getSensorOptions(msg, socket);\r\n\t\t  });\r\n\t\t\t\r\n\t\t  // Map Message setSensorOptions\r\n\t\t\tsocket.on( smng.CONSTANTS.Messages.setSensorOptions, function(msg){\r\n\t\t\t\tsmng._msg_setSensorOptions(msg);\r\n\t\t  });\r\n\t\t\t\r\n\t\t  // Map Message StartSensor\r\n\t\t\tsocket.on( smng.CONSTANTS.Messages.StartSensor, function(msg){\r\n\t\t\t\tsmng._msg_StartSensor(msg);\r\n\t\t  });\r\n\t\t\t\r\n\t\t\t\r\n\t\t  // Map Message StopSensor\r\n\t\t\tsocket.on( smng.CONSTANTS.Messages.StopSensor, function(msg){\r\n\t\t\t\tsmng._msg_StopSensor(msg);\r\n\t\t  });\r\n\r\n\t\t\r\n\t\t  // Map Message TurnOffSensors\r\n\t\t\tsocket.on( smng.CONSTANTS.Messages.TurnOffSensors, function(msg){\r\n\t\t\t\tsmng._msg_TurnOffSensors(msg);\r\n\t\t  });\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add Sensor\r\n\t */\r\n\taddSensor(config) {\r\n\t\tlet smng = this;\r\n\t\tlet stSenstor = null;\r\n\t\t\r\n\t\tswitch ( config.type ) {\r\n\t\t\tcase smng.CONSTANTS.Config.type_Vsensor:\r\n\t\t\t\tstSenstor = new VSensor(config);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase smng.CONSTANTS.Config.type_Cylonjs:\r\n\t\t\t\tstSenstor = new CylSensor(config);\r\n\t\t\t\tif (smng._Cylon == null) {\r\n\t\t\t\t\tsmng._Cylon = require('cylon');\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tdefault:\r\n\t\t\t\tstSenstor = new Sensor(config);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\tstSenstor.initialize();\r\n\t\tsmng.sensorList.push( stSenstor );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns Sensor searched by ID\r\n\t */\r\n\tgetSensorByID(sensorID) {\r\n\r\n\t\tlet smng = this;\r\n\t\t\r\n\t\tlet sensor = null;\r\n\t\tlet _i = 0;\r\n\t\t\r\n\t\tfor (_i = 0; _i < smng.sensorList.length; _i++) {\r\n\t\t\tif (smng.sensorList[_i].config.id == sensorID) {\r\n\t\t\t\tsensor = smng.sensorList[_i];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"STsensor\": sensor,\r\n\t\t\t\"position\": _i\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns new SensorEngine\r\n\t */\r\n\tstatic getSensorEngine(config) {\r\n\t\tlet sensorEngine = new SensorEngine(config);\r\n\t\treturn sensorEngine;\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Turn off sensors\r\n\t */\r\n\tturnOffSensors() {\r\n\t\t\r\n\t\tlet smng = this;\r\n\t\tlet snsList = smng.sensorList;\r\n\t\t\r\n\t\tsnsList.forEach(function(sns_, _i) {\n\t\t\tif ( sns_.sensorEngine != null ) {\r\n\t\t\t\tsns_.sensorEngine.stopEngine();\r\n\t\t\t}\n\t\t});\r\n\t\t\r\n\t\tif (smng._Cylon != null ) {\r\n\t\t\tsmng._Cylon.halt();\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log('<*> SensorsManager.turnOffSensors');\t// TODO REMOVE DEBUG LOG\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get sensor options\r\n\t */\r\n\tgetSensorOptions(sns){\r\n\t\t\r\n\t\tlet snsOptions = {\r\n\t\t\t\t\"loopTime\" : sns.config.loopTime,\r\n\t\t\t\t\"sensorEngineURL\": sns.config.options.sensorEngineURL\r\n\t\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tif ( sns.sensorEngine != null ) {\r\n\t\t\tsnsOptions.engineOptions = sns.sensorEngine.getOptions();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\treturn snsOptions;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Set sensor options\r\n\t */\r\n\tsetSensorOptions(sensor, options){\r\n\t\t\r\n\t\tlet smng = this;\r\n\t\t\r\n\t\tif (sensor.sensorEngine && \r\n\t\t\t\tsensor.sensorEngine.state == sensor.sensorEngine.CONSTANTS.States.SEstate_Working) {\r\n\t\t\tthrow \"Bad sensor state.\";\r\n\t\t}\r\n\t\t\r\n\t\tif (options.loopTime) {\r\n\t\t\tsensor.config.loopTime = options.loopTime;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.engineOptions) {\r\n\t\t\tsensor.sensorEngine.setOptions(options.engineOptions);\r\n\t\t}\r\n\t\t\r\n\t\tsmng.eventEmitter.emit(smng.CONSTANTS.Events.SensorOptionsUpdated, {\"sensor\": sensor});\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Message getSensorsList\r\n\t */\r\n\t_msg_getSensorsList(msg) {\r\n\t\t\r\n\t\tlet smng = this;\r\n\t\t\r\n\t\tconsole.log('<*> SensorsManager.Messages.getSensorsList');\t// TODO REMOVE DEBUG LOG\r\n\t\t  \r\n\t\t  let response = {};\r\n\t\t  response.numSensors = smng.sensorList.length;\r\n\t\t  response.sensors = [];\r\n\t\t  \r\n\t\t  \r\n\t\t  smng.sensorList.forEach(function(sns_, _i) {\r\n\t\t  \t\r\n\t\t\tlet sensor = {\r\n\t\t\t\t\t\"sensorID\" : sns_.config.id,\r\n\t\t\t\t\t\"type\" : sns_.config.type,\r\n\t\t\t\t\t\"state\" : sns_.config.state\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\tresponse.sensors.push( sensor );\r\n\t\t  });\r\n\t\t  \r\n\t\t  \r\n\t\t  smng.nodeCtrlSrv.socket.emit( smng.CONSTANTS.Messages.SensorsList, response );\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message StartSensor\r\n\t */\r\n\t_msg_StartSensor(msg) {\r\n\t\t\r\n\t\tlet smng = this;\t\r\n\t\t\r\n\t  console.log('<*> SensorsManager.Messages.StartSensor');\t// TODO REMOVE DEBUG LOG\r\n\t  console.log(msg);\t// TODO REMOVE DEBUG LOG\r\n//\t\t  console.log(' <·> ' + msg);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t  let response = {};\r\n\t  response.result = null;\r\n\t  \r\n\t  try {\r\n\t\t\r\n\t\t  let _sensorSearch = smng.getSensorByID(msg.sensorID);\r\n\t\t  \r\n\t\t  if (_sensorSearch.STsensor != null) {\r\n\t\t\t  _sensorSearch.STsensor.sensorEngine.startEngine();\r\n\t\t\t  response.result = \"OK\";\r\n\t\t  } else {\r\n\t\t\t  \r\n\t\t  console.log(\"Not found!!!\");\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tthrow \"Sensor not found.\";  \r\n\t\t  }\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\t\t\t\r\n\t\t  console.log('<EEE> SensorsManager.Messages.StartSensor ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t};\r\n\t  \r\n\t\t\r\n//\t\t\tmsg.result = response.result;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message StopSensor\r\n\t */\r\n\t_msg_StopSensor(msg) {\r\n\t\t\r\n\t\tlet smng = this;\r\n\t\t\r\n\t\tconsole.log('<*> SensorsManager.Messages.StopSensor');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(msg);\t// TODO REMOVE DEBUG LOG\r\n//\t\t  console.log(' <·> ' + msg);\t// TODO REMOVE DEBUG LOG\r\n\t\t  \r\n\t\t  let response = {};\r\n\t\t  response.result = null;\r\n\t\t  \r\n\t\t  try {\r\n\t\t\t\r\n\t\t\t  let _sensorSearch = smng.getSensorByID(msg.sensorID);\r\n\t\t\t  \r\n\t\t\t  if (_sensorSearch.STsensor != null) {\r\n\t\t\t\t  _sensorSearch.STsensor.sensorEngine.stopEngine();\r\n\t\t\t\t  response.result = \"OK\";\r\n\t\t\t  } else {\r\n\t\t\t\tthrow \"Sensor not found.\";  \r\n\t\t\t  }\r\n\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\tresponse.result = \"ERROR\";\r\n\t\t\t\tresponse.error = e;\r\n\r\n\t\t\t\tconsole.log('<EEE> SensorsManager.Messages.StopSensor ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\tconsole.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t};\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message TurnOffSensors\r\n\t */\r\n\t_msg_TurnOffSensors(msg) {\r\n\t\t\r\n\t  let smng = this;\r\n\t\t\r\n\t  console.log('<*> SensorsManager.Messages.TurnOffSensors');\t// TODO REMOVE DEBUG LOG\r\n\t  \r\n\t  let response = {};\r\n\t  response.result = null;\r\n\t  \r\n\t  try {\r\n\t\t\r\n\t\t  smng.turnOffSensors();\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t\tconsole.log('<EEE> SensorsManager.Messages.TurnOffSensors ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t};\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message getSensorOptions\r\n\t */\r\n\t_msg_getSensorOptions(msg, socket) {\r\n\t\t\r\n\t\t let smng = this;\r\n\t\t\r\n\t\t  console.log('<*> SensorsManager.Messages.getSensorOptions');\t// TODO REMOVE DEBUG LO\r\n\t\t  \r\n\t\t  let sensorID = msg.sensorID;\r\n\t\t  \r\n\t\t  let response = {\r\n\t\t\t\t  \"sensorID\" : sensorID\r\n\t\t  };\r\n\t\t  \r\n\t\t  try {\r\n\t\t\t  \r\n\t\t\t  let sensorSearch = smng.getSensorByID(sensorID);\r\n\t\t\t  if(sensorSearch.STsensor == null){\r\n\t\t\t\t  throw \"Sensor not found.\";\r\n\t\t\t  }\r\n\t\t\t\r\n\t\t\t  let sensor = sensorSearch.STsensor;\r\n\t\t\t  \r\n\t\t\t  response.options = smng.getSensorOptions(sensor);\r\n\t\t\t  \r\n\t\t\t  socket.emit(smng.CONSTANTS.Messages.SensorOptions, response);\t// Emit message SensorOptions\r\n\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\tresponse.result = \"ERROR\";\r\n\t\t\t\tresponse.error = e;\r\n\t\r\n\t\t\t\tconsole.log('<EEE> SensorsManager.Messages.getSensorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\tconsole.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t};\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message setSensorOptions\r\n\t */\r\n\t_msg_setSensorOptions(msg) {\r\n\t\t\r\n\t\t let smng = this;\r\n\t\t\t\r\n\t\t  console.log('<*> SensorsManager.Messages.setSensorOptions');\t// TODO REMOVE DEBUG LO\r\n\t\t  console.log(' <·> ' + msg);\t// TODO REMOVE DEBUG LO\r\n\r\n\t\t  let sensorID = msg.sensorID;\r\n\t\t  let options = msg.options;\r\n\t\t  \r\n\t\t  let response = {\r\n\t\t\t\t  \"sensorID\" : sensorID\r\n\t\t  };\r\n\t\t  \r\n\t\t  try {\r\n\t\t\t  \r\n\t\t\t  let sensorSearch = smng.getSensorByID(sensorID);\r\n\t\t\t  if(sensorSearch.STsensor == null){\r\n\t\t\t\t  throw \"Sensor not found.\";\r\n\t\t\t  }\r\n\t\t\t\r\n\t\t\t  let sensor = sensorSearch.STsensor;\r\n\t\t\t  \r\n\t\t\t  smng.setSensorOptions(sensor, options);\r\n\t\t\t  \r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\tresponse.result = \"ERROR\";\r\n\t\t\t\tresponse.error = e;\r\n\t\r\n\t\t\t\tconsole.log('<EEE> SensorsManager.Messages.setSensorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\tconsole.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t};\r\n\t\t  \r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n\r\nlet SensorsManager_Lib = {\r\n\t\"SensorsManager\" : SensorsManager,\r\n\t\"SensorEngine\" : SensorEngine,\r\n\t\"CONSTANTS\" : SensorsManager_CONSTANTS\r\n\t\r\n}\r\n\r\nmodule.exports = SensorsManager_Lib;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STNode\\es6"}