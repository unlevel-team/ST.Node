{"version":3,"sources":["nodeEngine/NodeControlService.js"],"names":[],"mappings":"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","file":"nodeEngine/NodeControlService.js","sourcesContent":["\"use strict\";\r\n\r\n\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n\r\n/**\r\n * NodeControlService CONSTANTS\r\n */\r\nconst NodeControlService_CONSTANTS = {\r\n\t\t\"Events\" : {\r\n\t\t\t\"ConnectedToServer\": \"Connected to server\",\r\n\t\t\t\"DisconnectedFromServer\": \"Disconnected from server\",\r\n\t\t\t\"BadNodeConfig\": \"Bad Node Config\",\r\n\t\t\t\r\n\t\t\t\"ShutDownNode\": \"ShutDownNode\"\r\n\r\n\r\n\t\t},\r\n\t\t\r\n\t\t\"Messages\" : {\r\n\t\t\t\"getSTNetworkInfo\" : \"Get STNetwork Info\",\r\n\t\t\t\"STNetworkInfo\" : \"STNetwork Info\",\r\n\t\t\t\"getNodeInfo\" : \"Get Node Info\",\r\n\t\t\t\"NodeInfo\" : \"Node Info\",\r\n\t\t\t\"BadNodeConfig\" : \"Bad Node Config\",\r\n\t\t\t\r\n\t\t\t\"ShutDownNode\" : \"ShutDownNode\"\r\n\r\n\t\t}\r\n\t};\r\n\r\n\r\n/*\r\n * NodeControlService\r\n * \r\n * Is the service for send and receive data control with ST Server\r\n * \r\n */\r\nclass NodeControlService {\r\n\t\r\n\t\r\n\tconstructor(config) {\r\n\t\t\r\n\t\tthis.config = config;\r\n\t\tthis.socket = null;\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\tthis.CONSTANTS = NodeControlService_CONSTANTS;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Connect to server\r\n\t */\r\n\tconnectToServer() {\r\n\r\n\t\tlet ncs = this;\r\n\t\t\r\n\t\tif (ncs.socket != null) {\r\n\t\t\t throw \"Already connected\";\r\n\t\t}\r\n\t\t\r\n\t\tlet serverURL = 'http://' +  ncs.config.server.netLocation + ':' + ncs.config.server.controlPort;\r\n\t\t\r\n\r\n\t\tncs.socket = require('socket.io-client')(serverURL);\r\n\t\t\r\n\t\tncs.mapControlMessages(ncs.socket);\r\n\t\t\r\n\t\t// Map connection to Server\r\n\t\tncs.socket.on('connect', function(){\t\r\n\t\t\t\r\n\t\t\t// Emit event ConnectedToServer\r\n\t\t\tncs.eventEmitter.emit(ncs.CONSTANTS.Events.ConnectedToServer);\r\n\t\t\t\r\n\t\t\t// Emit message getSTNetworkInfo\r\n\t\t\tncs.socket.emit(ncs.CONSTANTS.Messages.getSTNetworkInfo);\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Map disconnection from Server\r\n\t\tncs.socket.on('disconnect', function(){\t\r\n\t\t\t\r\n\t\t\t// Emit event DisconnectedFromServer\r\n\t\t\tncs.eventEmitter.emit(ncs.CONSTANTS.Events.DisconnectedFromServer);\r\n\r\n\t\t});\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control messages\r\n\t */\r\n\tmapControlMessages(socket){\r\n\t\t\r\n\t\tlet ncs = this;\r\n\t\tlet node = ncs.config.node;\r\n\t\t\r\n\t\t  // Map Message STNetworkInfo\r\n\t\t  socket.on( ncs.CONSTANTS.Messages.STNetworkInfo, function(msg){\r\n\t\t\t  \r\n\t\t\t  console.log('<*> ST Node.Messages.STNetworkInfo');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t  console.log(msg);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t  });\r\n\r\n\t\t  \r\n\t\t  // Message getNodeInfo\r\n\t\t  socket.on( ncs.CONSTANTS.Messages.getNodeInfo, function(msg){\r\n\t\t\t  \r\n\t\t\t  let numberOfSensors = 0;\r\n\t\t\t  let numberOfActuators = 0;\r\n\r\n\t\t\t  if (ncs.config.sensors != null && \r\n\t\t\t\t\t  ncs.config.sensors.length > 0) {\r\n\t\t\t\t  numberOfSensors = ncs.config.sensors.length;\r\n\t\t\t  }\r\n\t\t\t  \r\n\t\t\t  if (ncs.config.actuators != null && \r\n\t\t\t\t\t  ncs.config.actuators.length > 0) {\r\n\t\t\t\t  numberOfActuators = ncs.config.actuators.length;\r\n\t\t\t  }\r\n\t\t\t  \r\n\t\t\t  let response = {\r\n\t\t\t\t\"nodeID\" : node.nodeID,\r\n\t\t\t\t\"type\" : node.type,\r\n\t\t\t\t\r\n\t\t\t\t\"numSensors\" : numberOfSensors,\r\n\t\t\t\t\"numActuators\" : numberOfActuators\r\n\r\n\t\t\t  };\r\n\t\t\t  \r\n\t\t\t  // Emit message NodeInfo\r\n\t\t\t  ncs.socket.emit(ncs.CONSTANTS.Messages.NodeInfo, response);\r\n\t\t  });\r\n\r\n\t\t  \r\n\t\t  // Map Message BadNodeConfig\r\n\t\t  socket.on( ncs.CONSTANTS.Messages.BadNodeConfig, function(msg){\r\n\t\t\t  \r\n\t\t\t  console.log('<*> ST Node.Messages.BadNodeConfig');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t  console.log(msg);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\t  ncs.eventEmitter.emit(ncs.CONSTANTS.Events.BadNodeConfig, msg);\r\n\t\t\t  \r\n\t\t  });\r\n\r\n\t\t  \r\n\t\t  // Map Message ShutDownNode\r\n\t\t  socket.on( ncs.CONSTANTS.Messages.ShutDownNode, function(msg){\r\n\t\t\t  console.log('<*> ST Node.Messages.ShutDownNode');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t  console.log(msg);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\t  // Emit message ShutDownNode\r\n\t\t\t  ncs.eventEmitter.emit(ncs.CONSTANTS.Events.ShutDownNode, msg);\r\n\t\t\t  \r\n\t\t  });\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Disconnect from server\r\n\t */\r\n\tdisconnectFromServer() {\r\n\t\t\r\n\t\tlet ncs = this;\r\n\t\t\r\n\t\tif (ncs.socket == null) {\r\n\t\t\t throw \"Not connected\";\r\n\t\t}\r\n\t\t\r\n\t\tncs.socket.close();\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message getNodeInfo\r\n\t */\r\n\t_msg_getNodeInfo(socket, msg, options) {\r\n\t\t\r\n\t\tlet ncs = this;\r\n\t\tlet node = ncs.config.node;\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\"nodeID\" : node.nodeID,\r\n\t\t\t\"type\" : node.type,\r\n\t\t\r\n\t\t\t\"numSensors\" : 0,\r\n\t\t\t\"numActuators\" : 0\r\n\r\n\t\t}\r\n\t\t\r\n\t\tif (ncs.config.sensors != null && \r\n\t\t\tncs.config.sensors.length > 0) {\r\n\t\t\t\tresponse.numberOfSensors = ncs.config.sensors.length;\r\n\t\t}\r\n\t\t  \r\n\t\tif (ncs.config.actuators != null && \r\n\t\t\t\tncs.config.actuators.length > 0) {\r\n\t\t\t\tresponse.numberOfActuators = ncs.config.actuators.length;\r\n\t\t}\r\n\t\t\r\n\t\t// Emit message NodeInfo\r\n\t\tncs.socket.emit(ncs.CONSTANTS.Messages.NodeInfo, response);\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\nmodule.exports = NodeControlService;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STNode\\es6"}